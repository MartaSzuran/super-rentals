As we learned earlier, the Ember convention is to place your source code in the app folder. 
For other assets like images and fonts, the convention is to put them in the public folder. 
We will follow this convention by downloading the image file and saving it into 
public/assets/images/teaching-tomster.png.

This time, we would like the page to be served on the /about URL. 
In order to do this, we will need to tell Ember about our plan to add a page at that location. 
Otherwise, Ember will think we have visited an invalid URL!

The place to manage what pages are available is the router.

SO TO ADD NEW PAGE FIRST I NEED TO VISIT ROUTER.JS.
and add code: 

Router.map(function () {
  this.route('about');
});

-------------

creating in templates about.hbs

this.route('contact', {path: 'getting-in-touch'});  <- alias is contact but the path will be 
getting-in-touch


Since Ember offers great support for URLs out-of-the-box, we could just link our pages together 
using the <a> tag with the appropriate href. But in ember they provide us <LinkTo>
syntax: 
<LinkTo @route="about" class="button">About</LinkTo>

<LinkTo> -  is an example of a component
@route   -  is how we pass arguments into the component
Note that this should be the name of the route, not the path, 
which is why we specified "about" instead of "/about"

passed without the @ symbol (class=... as opposed to @class=...), 
so that Ember will know they are just regular HTML attributes.

<LinkTo> avoid full page refresh in opposite to <a> which refresh all page by sending request to the server
------------------------------
TESTES
Adding Acceptance Tests with Generators

$ ember generate acceptance-test super-rentals
installing acceptance-test
  create tests/acceptance/super-rentals-test.js

This is called a generator command in Ember CLI.

follows the pattern ember generate <type> <name>, 
where <type> is the kind of thing we are generating, and <name> is what we want to call it.

we can call also ember g <type> <name>

acceptance test == application test

import { module, test } from 'qunit';
import { click, visit, currentURL } from '@ember/test-helpers';
import { setupApplicationTest } from 'ember-qunit';

module('Acceptance | super rentals', function (hooks) {
  setupApplicationTest(hooks);

  test('visiting /', async function (assert) {
    await visit('/');

    assert.strictEqual(currentURL(), '/');
    assert.dom('h2').hasText('Welcome to Super Rentals!');

    assert.dom('.jumbo a.button').hasText('About Us');
    await click('.jumbo a.button');

    assert.strictEqual(currentURL(), '/about');
  });
});

!!!!test into motion by running the test server using the ember test --server!!!!

test('visiting /' ... - visit is ember test helper - it is like we type go to 
http://localhost:4200/ in the browser's address bar and hitting the enter key

!!!! AWAIT
await keyword. That way, it will wait until the page completely finishes loading before moving on to the next step.
any user interaction, needs to be await-ed.

await visit('/');
This is almost always the behavior we want, so we will almost always use await and visit as a pair.

assert.dom('.jumbo a.button')
"look inside the tag with the jumbo class for an <a> tag with the button class."


assert.strictEqual(currentURL(), '/about');
Finally, we asserted that clicking on the link should bring us to the /about URL.

---------------------------
COMPONENTS

component - way to pack code which is repeating

like:
<div class="jumbo">
  <div class="right tomster"></div>
  <!-- page specific content -->
</div>

then create new file f.e.app/components/jumbo.hbs
and:
<div class="jumbo">
  <div class="right tomster"></div>
  {{yield}}
</div>

then just use in code : 
<Jumbo>  <- with capitalize letter!! 

The jumbo.hbs template corresponds to the <Jumbo> tag,
just like super-awesome.hbs corresponds to <SuperAwesome>.
----------------

Passing Content to Components with {{yield}}

just need to emcapsulate content into Jumbo tags :
<Jumbo>some content</Jumbo>

<Jumbo>
  <h2>About Super Rentals</h2>
  <p>
    The Super Rentals website is a delightful project created to explore Ember.
    By building a property rental site, we can simultaneously imagine traveling
    AND building Ember applications.
  </p>
  <LinkTo @route="contact" class="button">Contact Us!</LinkTo>
</Jumbo>

-----------------------
writing test for components

$ ember generate component-test jumbo
installing component-test
  create tests/integration/components/jumbo-test.js

Here, we used the generator to generate a component test, also known as a rendering test. 

-------------------------
creating navbar

create a <NavBar> component at app/components/nav-bar.hbs

app/components/nav-bar.hbs

<nav class="menu">
  <LinkTo @route="index" class="menu-index">
    <h1>SuperRentals</h1>
  </LinkTo>
  <div class="links">
    <LinkTo @route="about" class="menu-about">
      About
    </LinkTo>
    <LinkTo @route="contact" class="menu-contact">
      Contact
    </LinkTo>
  </div>
</nav>

then add at the beggining of each page:
<NavBar />
<Jumbo>
  <h2>About Super Rentals</h2>
  <p>
    The Super Rentals website is a delightful project created to explore Ember.
    By building a property rental site, we can simultaneously imagine traveling
    AND building Ember applications.
  </p>
  <LinkTo @route="contact" class="button">Contact Us</LinkTo>
</Jumbo>

<NavBar /> is a shorthand for <NavBar></NavBar>.

we need to add some test to acceptence tests, because navigation bar should work throughout all app

-----------------------
Using the Application Template and {{outlet}}s

special template called application.hbs

so I need to create that file into templates :
<div class="container">
  <NavBar />
  <div class="body">
    {{outlet}}
  </div>
</div>

and delete all navbar because I have two at the moment :) 

---------------------------
Generating Components

ember generate component rental

 - then add components/rental.hbs
 - then add test

----------------------------------------------------
Organizing Code with Namespaced Components

ember generate component rental/image

This time, we had a / in the component's name. This resulted in the component being created at app/components/rental/image.hbs, 
Components like these are known as namespaced components. Namespacing allows us to organize our components by folders according to their purpose.
which can be invoked as <Rental::Image>

I have folder in templets rental/image.hbs
---------------------------------------
Forwarding HTML Attributes with ...attributes


in: app/components/rental/image.hbs
add:

<div class="image">
  <img ...attributes>
</div>

then this in app/components/rental.hbs:
  <Rental::Image
    src="https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg"
    alt="A picture of Grand Old Mansion"
  />

adding tests to tests/integration/components/rental/image-test.js and 
tests/integration/components/rental-test.js

-----------------------------------------------
Interactive Components

Adding Behavior to Components with Classes

add a JavaScript file for our <Rental::Image> component by running the component-class generator:

$ ember generate component-class rental/image


This generated a JavaScript file with the same name as our component's template at app/components/rental/image.js. 
It contains a JavaScript class, inheriting from @glimmer/component.
@glimmer/component, or Glimmer component, is one of the several component classes available to use. 


import Component from '@glimmer/component';

export default class RentalImageComponent extends Component {
  constructor(...args) {
    super(...args);
    this.isLarge = false;
  }
}

more concise:
import Component from '@glimmer/component';

export default class RentalImageComponent extends Component {
  isLarge = false;
}


Here, in the component's constructor, we initialized the instance variable this.isLarge with the value false, 
since this is the default state that we want for our component.

we need to update template in app/components/rental/image.hbs


{{#if this.isLarge}}
  <div class="image large">
    <img ...attributes>
    <small>View Smaller</small>
  </div>
{{else}}
  <div class="image">
    <img ...attributes>
    <small>View Larger</small>
  </div>
{{/if}}

adding managing state with tracked properties

by adding a method into image.js:

import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { action } from '@ember/object';

export default class RentalImageComponent extends Component {
  @ tracked isLarge = false;

  @action toggleSize() {
    this.isLarge = !this.isLarge;
  }
}


First, we added the @tracked decorator to the isLarge instance variable. 
This annotation tells Ember to monitor this variable for updates. 
Whenever this variable's value changes, 
Ember will automatically re-render any templates that depend on its value.

method toggleSize() :

toggleSize() {
    this.isLarge = !this.isLarge;
  }
Next, we added a toggleSize method to our class that switches this.isLarge to the opposite 
of its current state (false becomes true, or true becomes false).

with adding @action - This indicates to Ember that we intend to use this method from our template. 

NEXT wire this up in the template in : app/components/rental/image.hbs

--
<button type="button" class="image" {{on "click" this.toggleSize}}>

First, since we wanted to make our component interactive, we switched the 
containing tag from <div> to <button> (this is important for accessibility reasons). 
By using the correct semantic tag, we will also get focusability and keyboard interaction 
handling "for free".

Next, we used the {{on}} modifier to attach 
this.toggleSize as a click handler on the button.

-------------
adding tests - look at git

-------
concise code in image.hbs
first :
<button type="button" class="image" {{if this.isLarge "large"}} {{on "click" this.toggleSize}}>
  <img ...attributes>
  {{#if this.isLarge}}
    <small>View Smaller</small>
  {{else}}
    <small>View Larger</small>
  {{/if}}
</button>

second:
<button type="button" class="image" {{if this.isLarge "large"}} {{on "click" this.toggleSize}}>
  <img ...attributes>
  <small>View {{if this.isLarge "Smaller" "Larger"}}</small>
</button>

--------------------------
MANAGING APPLICATION-level CONFIGURATIONS


Generating a Component with a Component Class:
in other words the component with js file

ember generate component map --with-component-class

shorter : ember g component map -gc

However, in the case of our <Map> component, we are pretty sure that we are going to need a 
JavaScript file for some behavior that we have yet to define! To save a step later, we can 
pass the --with-component-class flag to the component generator so that we have everything 
we need from the get-go.

in: map.hbs

<div class="map">
  <img 
    alt="Map image at coordinates {{@lat}}, {{@lng}}"
    ...attributes
    src="https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/{{@lng}},{{@lat}},{{@zoom}}/{{@width}}x{{@height}}@2x?access_token={{this.token}}"
    width={{@width}} height={{@height}}
  >
</div>

Our template contains several values that don't yet exist—@lat, @lng, @zoom, @width, and @height. 
These are arguments to the <Map> component that we will supply when invoking it.

By parameterizing our component using arguments, we made a reusable component that can be invoked 
from different parts of the app and customized to meet the needs for those specific contexts.

alt="Map image at coordinates {{@lat}}, {{@lng}}" - directly interpolating values into the alt attribute's value

The ordering is important here! Ember applies the attributes in the order that they appear.
values written before ...attributes will be override if their value will change, 
and attributes like width, and height need to be after ...attributes, so that they don't get 
accidentally overwritten by the invoker.
-----------------
Refactoring with Getters and Auto-track


From within our JavaScript class, we have access to our component's arguments using the this.args.* API. 
Using that, we can move the URL logic from the template into a new getter.

make some changes in: app/components/map.js

const MAPBOX_API = 'https://api.mapbox.com/styles/v1/mapbox/streets-v11/static';

export default class MapComponent extends Component {
  get src() {
    let { lng, lat, width, height, zoom } = this.args;

    let coordinates = `${lng},${lat},${zoom}`;
    let dimensions = `${width}x${height}`;
    let accessToken = `access_token=${this.token}`;

    return `${MAPBOX_API}/${coordinates}/${dimensions}@2x?${accessToken}`;
  }
  
  get token() {
    return encodeURIComponent(ENV.MAPBOX_ACCESS_TOKEN);
  }
}

and in map.hbs
<div class="map">
  <img 
    alt="Map image at coordinates {{@lat}}, {{@lng}}"
    ...attributes
    src={{this.src}}
    width={{@width}} height={{@height}}
  >
</div>

get src()  <- getters 
All arguments that can be accessed from this.args (in other words, this.args.*) 
are implicitly marked as @tracked by the Glimmer component superclass

ADDING TESTS:
Using the special this.setProperties testing API, we can pass arbitrary 
values into our component.

Instead, this refers to a special test context object, which we have access to inside the 
render helper. This provides a "bridge" for us to pass dynamic values, in the form of arguments, 
into our invocation of the component. 
This allows us to update these values as needed from the test function.

----------------------------------------------
Working with Route Files

start working with server:

creating index.js adding to app/routes/index.js:

import Route from '@ember/routing/route';   <-route class

export default class IndexRoute extends Route {
  async model() {
    return {
      title: 'Grand Old Mansion',
      owner: 'Veruca Salt',
      city: 'San Francisco',
      location: {
        lat: 37.7749,
        lng: -122.4194,
      },
      category: 'Estate',
      type: 'Standalone',
      bedrooms: 15,
      image: 'https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg',
      description: 'This grand old mansion sits on over 100 acres of rolling hills and dense redwood forests.',
    };
  }
}

Route class into the file. This class is used as a starting point for 
adding functionality to a route, such as loading data.

using word export <- means that the rest of the application can use it.

----------------
Returning Local Data from the Model Hook

async method called model(). This method is also known as the model hook.

why async?
fetching data is usually an asynchronous operation, 
the model hook is marked as async

The object returned from this hook is known as the model for the route.

-----------------------------------------
Accessing Route Models from Templates

Plain Old Java Object (POJO) – termin używany przez zwolenników idei mówiącej, 
że im prostszy design tym lepiej. 
Używa się go dla określenia obiektów, będących zwyczajnymi obiektami Java.

in app/templates/index.hbs add:
<h1>{{ @model.title }}</h1>  <- to check if it is working :) 

finally:
app/templates/index.hbs

<Jumbo>
  <h2>Welcome to Super Rentals!</h2>
  <p>We hope you find exactly what you're looking for in a place to stay.</p>
  <LinkTo @route="about" class="button">About Us</LinkTo>
</Jumbo>

<h1>{{@model.title}}</h1>

<div class="rentals">
  <ul class="results">
    <li><Rental /></li>
    <li><Rental /></li>
    <li><Rental /></li>
    <li><Rental @rental={{@model}} /></li>
    <li><Rental @rental={{@model}} /></li>
    <li><Rental @rental={{@model}} /></li>
  </ul>
</div>

and then in rental.hbs:

app/components/rental.hbs

<article class="rental">
  <Rental::Image
    src="https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg"
    alt="A picture of Grand Old Mansion"
    src={{@rental.image}}
    alt="A picture of {{@rental.title}}"
  />
  <div class="details">
    <h3>Grand Old Mansion</h3>
    <h3>{{@rental.title}}</h3>
    <div class="detail owner">
      <span>Owner:</span> Veruca Salt
      <span>Owner:</span> {{@rental.owner}}
    </div>
    <div class="detail type">
      <span>Type:</span> Standalone
      <span>Type:</span> {{@rental.type}}
    </div>
    <div class="detail location">
      <span>Location:</span> San Francisco
      <span>Location:</span> {{@rental.city}}
    </div>
    <div class="detail bedrooms">
      <span>Number of bedrooms:</span> 15
      <span>Number of bedrooms:</span> {{@rental.bedrooms}}
    </div>
  </div>
  <Map
    @lat="37.7749"
    @lng="-122.4194"
    @lat={{@rental.location.lat}}
    @lng={{@rental.location.lng}}
    @zoom="9"
    @width="150"
    @height="150"
    alt="A map of Grand Old Mansion"
    alt="A map of {{@rental.title}}"
  />
</article>

---------------------
adding tests:

we need to use setProperties ({}) <- because ors test doesnt have any routing.

tests/integration/components/rental-test.js

import { module, test } from 'qunit';
import { setupRenderingTest } from 'ember-qunit';
import { render } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';

module('Integration | Component | rental', function (hooks) {
  setupRenderingTest(hooks);

  test('it renders information about a rental property', async function (assert) {
    await render(hbs`<Rental />`);
    this.setProperties({
      rental: {
        title: 'Grand Old Mansion',
        owner: 'Veruca Salt',
        city: 'San Francisco',
        location: {
          lat: 37.7749,
          lng: -122.4194,
        },
        category: 'Estate',
        type: 'Standalone',
        bedrooms: 15,
        image:
          'https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg',
        description:
          'This grand old mansion sits on over 100 acres of rolling hills and dense redwood forests.',
      },
    });

    await render(hbs`<Rental @rental={{this.rental}} />`);

    assert.dom('article').hasClass('rental');
    assert.dom('article h3').hasText('Grand Old Mansion');
    assert.dom('article .detail.owner').includesText('Veruca Salt');
    assert.dom('article .detail.type').includesText('Standalone');
    assert.dom('article .detail.location').includesText('San Francisco');
    assert.dom('article .detail.bedrooms').includesText('15');
    assert.dom('article .image').exists();
    assert.dom('article .map').exists();
  });
});


-------------------------------------------
Mocking Server Data with Static JSON Files

I have imported some json file to simulate working with server.

in app/routes/index.js change hard-coded data for taking input from JSON:

import Route from '@ember/routing/route';

export default class IndexRoute extends Route {
  async model() {
    let response = await fetch('/api/rentals.json');
    let parsed = await response.json();
    return parsed;
  }
}

As mentioned above, fetching data from the server is usually an asynchronous operation. 
The Fetch API takes this into account, which is why fetch is an async function, 
just like our model hook. To consume its response, we will have to pair it with the
 await keyword.

parse the response data accordingly 
Parsing the response data is also an asynchronous operation, so we'll just use the await 
keyword here, too.

[
The JSON.parse() method parses a JSON string, constructing the JavaScript value or 
object described by the string. An optional reviver function can be provided to 
perform a transformation on the resulting object before it is returned.

const json = '{"result":true, "count":42}';
const obj = JSON.parse(json);

f.e.:
console.log(obj.count);
// expected output: 42

console.log(obj.result);
// expected output: true
]

---------------------------------------
Adapting Server Data

changing some code to make it able to work with JSON

app/routes/index.js

import Route from '@ember/routing/route';

const COMMUNITY_CATEGORIES = ['Condo', 'Townhouse', 'Apartment'];

export default class IndexRoute extends Route {
  async model() {
    let response = await fetch('/api/rentals.json');
    let parsed = await response.json();
    return parsed;
    let { data } = await response.json();

    return data.map((model) => {
      let { attributes } = model;
      let type;

      if (COMMUNITY_CATEGORIES.includes(attributes.category)) {
        type = 'Community';
      } else {
        type = 'Standalone';
      }

      return { type, ...attributes };
    });
  }
}
---------------
Loops and Local Variables in Templates with {{#each}}

Inside of the block we have access to the item of the current iteration with the {{rental}} 
variable. But why rental? Well, because we named it that! This variable comes from the as 
|rental| declaration of the each loop. We could have just as easily called it something else, 
like as |property|, in which case we would have to access the current item through the 
{{property}} variable.

app/templates/index.hbs

<Jumbo>
  <h2>Welcome to Super Rentals!</h2>
  <p>We hope you find exactly what you're looking for in a place to stay.</p>
  <LinkTo @route="about" class="button">About Us</LinkTo>
</Jumbo>

<div class="rentals">
  <ul class="results">
    <li><Rental @rental={{@model}} /></li>
    <li><Rental @rental={{@model}} /></li>
    <li><Rental @rental={{@model}} /></li>
    {{#each @model as |rental|}}
      <li><Rental @rental={{rental}} /></li>
    {{/each}}
  </ul>
</div>



